esphome:
  name: sauna
  friendly_name: sauna

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "Hcbp/oa8VWQlhAf43Wk14DNFKqqNPyOP2ZOKlPQNpNg="

ota:

wifi:
  id: espwifi
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: !secret wifi_ssid_2
      password: !secret wifi_password_2

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-79A218"
    password: "bJhPXchn93Ux"

captive_portal:

  ##### USB Power Delivery #####
external_components:
  #- source:
  #    type: git
  #    url: https://github.com/IMMRMKW/esphome-usb-powerdelivery.git
  #    ref: main
  #  components: fusb302
  #  refresh: 10s
  - source:
      type: local
      path: components
      #components: [ my_component1, calibrated_CO2 ]
 # - source:
 #     type: git
 #     url: https://github.com/IMMRMKW/my_component1.git
 #     ref: main
 #   components: [ my_component1, calibrated_CO2 ] 
 #   refresh: 10s

fusb302:
  setup_priority: 900
  maximum_supply_voltage: 9v
  interrupt_pin: GPIO36    

##### Hardware ports #####

# For BME280/BME680 and other retrofitted sensor
i2c:
  - sda: 21
    scl: 22
    scan: true
    id: bus_a

##### Sensors #####

sensor:

  - platform: bmp280
    temperature:
      id: sauna_temperature
      name: "Sauna Temperature"
      oversampling: 16x
    pressure:
      name: "Outside Pressure"
    address: 0x76
    update_interval: 1s
  # other sensor, currently not used.
  # - platform: dht
  #   pin: D2
  #   temperature:
  #     name: "Room Temperature"
  #   update_interval: 1s

#not necessary, may be used as a base to get a knob working in the sauna
# number:
#   - platform: template
#     name: "Target Temperature"
#     id: target_temperature
#     min_value: 1
#     max_value: 100
#     step: 1
#     initial_value: 40
#     optimistic: true
#     on_value:
#       then:
#         - climate.control:
#             id: sauna_thermostat
#             target_temperature: !lambda "return x;"


switch:
  - platform: gpio
    pin: 26
    id: heater_relay
    name: "heater_relay"

climate:
  - platform: thermostat
    name: "Sauna_thermostat"
    id: sauna_thermostat
    visual:
      min_temperature: 0
      max_temperature: 100
    min_heating_off_time: 5s
    min_heating_run_time: 5s
    min_idle_time: 5s
    sensor: sauna_temperature
    heat_deadband: .4
    heat_overrun: .4
    heat_action:
      - switch.turn_on: heater_relay
    idle_action:
      - switch.turn_off: heater_relay
    preset:
    - name: Sauna_On
      default_target_temperature_low: 40

##### Outputs #####

output:
  # Heartbeat status LED
  - platform: gpio
    id: statusLED
    pin: GPIO27

##### General #####

time:
  - platform: homeassistant
    id: esptime

interval:
  - interval: 1000ms
    then:
      - output.turn_on: statusLED
      - delay: 500ms
      - output.turn_off: statusLED

    
    